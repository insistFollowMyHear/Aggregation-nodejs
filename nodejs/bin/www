#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('tbc-server:server');
const http = require('http');

// 获取端口并存储在 Express 中
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// 创建 HTTP 服务器
const server = http.createServer(app);

// 在所有网络接口上监听
server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

// 端口标准化
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // 命名管道
    return val;
  }

  if (port >= 0) {
    // 端口号
    return port;
  }

  return false;
}

// HTTP 服务器 "error" 事件处理
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 处理特定的监听错误
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// HTTP 服务器 "listening" 事件处理
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  console.log(`Server running at http://localhost:${port}`);
} 